import os
import sys
import numpy as np
import time

# Local project code
# from motion_planning import rrt

# Provided simulator code, which is not set up to be installed as packages
sys.path.extend(os.path.abspath(os.path.join(os.path.dirname(os.getcwd()),
                                             *["padm_project_2023f", d])) for d in ["", "pddlstream", "ss-pybullet"])

import pybullet_tools.utils as pb
from pybullet_tools.ikfast.franka_panda.ik import PANDA_INFO, FRANKA_URDF
from pybullet_tools.ikfast.ikfast import get_ik_joints, closest_inverse_kinematics

# These are from padm_project_2023f
from src.world import World
from src.utils import JOINT_TEMPLATE, BLOCK_SIZES, BLOCK_COLORS, COUNTERS, \
    ALL_JOINTS, LEFT_CAMERA, CAMERA_MATRIX, CAMERA_POSES, CAMERAS, compute_surface_aabb, \
    BLOCK_TEMPLATE, name_from_type, GRASP_TYPES, SIDE_GRASP, joint_from_name, \
    STOVES, TOP_GRASP, randomize, LEFT_DOOR, point_from_pose, translate_linearly, \
    SUGAR, SPAM

# Constants
UNIT_POSE2D = (0., 0., 0.)  # x, y, yaw
INIT_POSE_SUGAR = (-0.2, 0.65, np.pi / 4)  # x, y, yaw in world
INIT_POSE_SPAM = (0.2, 1.1, np.pi / 4)  # x, y, yaw in world
POSE_OPEN_COUNTER = ()
POSE_DRAWER = ()

# Helper functions from minimal_example.py
def add_ycb(world, ycb_type, counter=0, **kwargs) -> (str, tuple):
    name = name_from_type(ycb_type)
    world.add_body(name, color=np.ones(4))
    pose = pose2d_on_surface(world, name, COUNTERS[counter], **kwargs)
    return name, pose

def pose2d_on_surface(world, entity_name, surface_name, pose2d=UNIT_POSE2D):
    x, y, yaw = pose2d
    body = world.get_body(entity_name)
    print("[pose2d_on_surface] body = ", body)
    surface_aabb = compute_surface_aabb(world, surface_name)
    z = pb.stable_z_on_aabb(body, surface_aabb)
    pose = pb.Pose(pb.Point(x, y, z), pb.Euler(yaw=yaw))
    pb.set_pose(body, pose)
    print("[pose2d_on_surface] entity {} pose = {}".format(entity_name, pose))
    return pose

def get_sample_fn(body, joints, custom_limits={}, **kwargs):
    lower_limits, upper_limits = pb.get_custom_limits(body, joints, custom_limits,
                                                      circular_limits=pb.CIRCULAR_LIMITS)
    generator = pb.interval_generator(lower_limits, upper_limits, **kwargs)
    def fn():
        return tuple(next(generator))
    return fn

add_sugar_box = lambda world, **kwargs: add_ycb(world, SUGAR, **kwargs)
add_spam_box = lambda world, **kwargs: add_ycb(world, SPAM, **kwargs)

if __name__ == "__main__":
    print("Random seed:", pb.get_random_seed())
    print("Numpy seed:", pb.get_numpy_seed())

    world = World(use_gui=True)

    # Scoot robot over for better starting position
    init_base_pos = pb.get_joint_positions(world.robot, world.base_joints)
    # Using world coordinate frame, scoot in y-pos direction
    new_base_pos = np.array(init_base_pos) + np.array([0.0, 0.4, 0.0])
    pb.set_joint_positions(world.robot, world.base_joints, new_base_pos)

    #example
#     trajectory = np.array([
#     [1.20015843e-02, -9.67484157e-02, -2.05498416e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01, -2.07680280e-01],
#     [-5.69781601e-01, -4.61031601e-01, -3.52281601e-01, -2.43531601e-01, -1.34781601e-01, -2.60316014e-02, 8.27183986e-02, 1.91468399e-01, 2.14383836e-01, 2.14383836e-01, 2.14383836e-01, 2.14383836e-01, 2.14383836e-01, 2.14383836e-01, 2.14383836e-01],
#     [5.68014875e-05, 1.08806801e-01, 2.17556801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01, 3.19789801e-01],
#     [-2.81059694e+00, -2.68009694e+00, -2.54959694e+00, -2.41909694e+00, -2.28859694e+00, -2.15809694e+00, -2.02759694e+00, -1.89709694e+00, -1.76659694e+00, -1.63609694e+00, -1.50559694e+00, -1.37509694e+00, -1.24459694e+00, -1.11409694e+00, -1.04157275e+00],
#     [-2.57683743e-04, -1.30757684e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01, -1.27232139e-01],
#     [3.03634501e+00, 2.90584501e+00, 2.77534501e+00, 2.64484501e+00, 2.51434501e+00, 2.38384501e+00, 2.25334501e+00, 2.12284501e+00, 2.03978070e+00, 2.03978070e+00, 2.03978070e+00, 2.03978070e+00, 2.03978070e+00, 2.03978070e+00, 2.03978070e+00],
#     [7.41070151e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01, 8.15890203e-01]
# ]   )

    #with actual start and end from sim
    trajectory = np.array([ 1.20015843e-02, 3.37515843e-02, 5.55015843e-02, 7.72515843e-02,
   9.90015843e-02, 1.20751584e-01, 1.42501584e-01, 1.64251584e-01,
   1.86001584e-01, 2.07751584e-01, 2.29501584e-01, 2.51251584e-01,
   2.73001584e-01, 2.94751584e-01, 3.16501584e-01, 3.38251584e-01,
   3.60001584e-01, 3.81751584e-01, 4.03501584e-01, 4.25251584e-01,
   4.47001584e-01, 4.68751584e-01, 4.90501584e-01, 5.12251584e-01,
   5.34001584e-01, 5.55751584e-01, 5.77501584e-01, 5.99251584e-01,
   6.21001584e-01, 6.42751584e-01, 6.64501584e-01, 6.86251584e-01,
   7.08001584e-01, 7.29751584e-01, 7.51501584e-01, 7.73251584e-01,
   7.95001584e-01, 8.16751584e-01, 8.38501584e-01, 8.60251584e-01,
   8.82001584e-01, 9.03751584e-01, 9.25501584e-01, 9.47251584e-01,
   9.69001584e-01, 9.90751584e-01, 1.01250158e+00, 1.03425158e+00,
   1.05600158e+00, 1.07775158e+00, 1.09950158e+00, 1.12125158e+00,
   1.14300158e+00, 1.16475158e+00, 1.18650158e+00, 1.20825158e+00,
   1.23000158e+00, 1.25175158e+00, 1.27350158e+00, 1.29525158e+00,
   1.31700158e+00, 1.33875158e+00, 1.36050158e+00, 1.38225158e+00,
   1.40400158e+00, 1.42575158e+00, 1.44750158e+00, 1.46925158e+00,
   1.49100158e+00, 1.51275158e+00, 1.53450158e+00, 1.55625158e+00,
   1.56182814e+00, 1.56182814e+00, 1.56907814e+00, 1.54732814e+00,
   1.56907814e+00, 1.56182814e+00, 1.56182814e+00, 1.56182814e+00,
   1.56182814e+00, 1.56182814e+00, 1.55457814e+00, 1.57632814e+00,
   1.55457814e+00, 1.56182814e+00, 1.56182814e+00, 1.56182814e+00,
   1.56182814e+00, 1.56182814e+00],
 [-5.69781601e-01,-5.91531601e-01,-6.13281601e-01,-6.35031601e-01,
  -6.56781601e-01,-6.78531601e-01,-7.00281601e-01,-7.22031601e-01,
  -7.43781601e-01,-7.65531601e-01,-7.87281601e-01,-8.09031601e-01,
  -8.30781601e-01,-8.52531601e-01,-8.74281601e-01,-8.96031601e-01,
  -9.17781601e-01,-9.39531601e-01,-9.61281601e-01,-9.83031601e-01,
  -1.00478160e+00,-1.02653160e+00,-1.04828160e+00,-1.07003160e+00,
  -1.09178160e+00,-1.11353160e+00,-1.13528160e+00,-1.15703160e+00,
  -1.17878160e+00,-1.20053160e+00,-1.22228160e+00,-1.24403160e+00,
  -1.26578160e+00,-1.28753160e+00,-1.30928160e+00,-1.33103160e+00,
  -1.35278160e+00,-1.37453160e+00,-1.39628160e+00,-1.41803160e+00,
  -1.43978160e+00,-1.46153160e+00,-1.48328160e+00,-1.50503160e+00,
  -1.52678160e+00,-1.54853160e+00,-1.57028160e+00,-1.59203160e+00,
  -1.61378160e+00,-1.63105773e+00,-1.63105773e+00,-1.63105773e+00,
  -1.63105773e+00,-1.63830773e+00,-1.61655773e+00,-1.63830773e+00,
  -1.63105773e+00,-1.63105773e+00,-1.62380773e+00,-1.64555773e+00,
  -1.62380773e+00,-1.63105773e+00,-1.63105773e+00,-1.63105773e+00,
  -1.63830773e+00,-1.61655773e+00,-1.63830773e+00,-1.63105773e+00,
  -1.63105773e+00,-1.63105773e+00,-1.63105773e+00,-1.63105773e+00,
  -1.63105773e+00,-1.63105773e+00,-1.63105773e+00,-1.63105773e+00,
  -1.63105773e+00,-1.63105773e+00,-1.63105773e+00,-1.63830773e+00,
  -1.61655773e+00,-1.63830773e+00,-1.63105773e+00,-1.63105773e+00,
  -1.62380773e+00,-1.64555773e+00,-1.62380773e+00,-1.63105773e+00,
  -1.63105773e+00,-1.63105773e+00],
 [ 5.68014875e-05,-2.16931985e-02,-4.34431985e-02,-6.51931985e-02,
  -8.69431985e-02,-1.08693199e-01,-1.30443199e-01,-1.52193199e-01,
  -1.73943199e-01,-1.95693199e-01,-2.17443199e-01,-2.39193199e-01,
  -2.60943199e-01,-2.82693199e-01,-3.04443199e-01,-3.26193199e-01,
  -3.47943199e-01,-3.69693199e-01,-3.91443199e-01,-4.13193199e-01,
  -4.34943199e-01,-4.56693199e-01,-4.78443199e-01,-5.00193199e-01,
  -5.21943199e-01,-5.43693199e-01,-5.65443199e-01,-5.87193199e-01,
  -6.08943199e-01,-6.30693199e-01,-6.52443199e-01,-6.74193199e-01,
  -6.95943199e-01,-7.17693199e-01,-7.39443199e-01,-7.61193199e-01,
  -7.82943199e-01,-8.04693199e-01,-8.26443199e-01,-8.48193199e-01,
  -8.69943199e-01,-8.91693199e-01,-9.13443199e-01,-9.35193199e-01,
  -9.56943199e-01,-9.78693199e-01,-1.00044320e+00,-1.02219320e+00,
  -1.04394320e+00,-1.06569320e+00,-1.08744320e+00,-1.10919320e+00,
  -1.13094320e+00,-1.15269320e+00,-1.17444320e+00,-1.19619320e+00,
  -1.21794320e+00,-1.23969320e+00,-1.26144320e+00,-1.28319320e+00,
  -1.30494320e+00,-1.32669320e+00,-1.34844320e+00,-1.37019320e+00,
  -1.39194320e+00,-1.41369320e+00,-1.43544320e+00,-1.45719320e+00,
  -1.47894320e+00,-1.50069320e+00,-1.52244320e+00,-1.54419320e+00,
  -1.56594320e+00,-1.58769320e+00,-1.60944320e+00,-1.63119320e+00,
  -1.65294320e+00,-1.67469320e+00,-1.69644320e+00,-1.71819320e+00,
  -1.73994320e+00,-1.76169320e+00,-1.78344320e+00,-1.80519320e+00,
  -1.82694320e+00,-1.84869320e+00,-1.87044320e+00,-1.89219320e+00,
  -1.91394320e+00,-1.90594727e+00],
 [-2.81059694e+00,-2.78449694e+00,-2.75839694e+00,-2.73229694e+00,
  -2.70619694e+00,-2.68009694e+00,-2.65399694e+00,-2.62789694e+00,
  -2.60179694e+00,-2.57569694e+00,-2.54959694e+00,-2.52349694e+00,
  -2.49739694e+00,-2.47129694e+00,-2.44519694e+00,-2.41909694e+00,
  -2.39299694e+00,-2.36689694e+00,-2.34079694e+00,-2.31469694e+00,
  -2.28859694e+00,-2.26249694e+00,-2.23639694e+00,-2.21029694e+00,
  -2.18419694e+00,-2.15809694e+00,-2.13199694e+00,-2.10589694e+00,
  -2.07979694e+00,-2.05369694e+00,-2.02759694e+00,-2.00149694e+00,
  -1.97539694e+00,-1.94929694e+00,-1.92319694e+00,-1.89709694e+00,
  -1.87099694e+00,-1.84489694e+00,-1.81879694e+00,-1.79269694e+00,
  -1.76659694e+00,-1.74049694e+00,-1.71439694e+00,-1.68829694e+00,
  -1.66219694e+00,-1.63609694e+00,-1.60999694e+00,-1.58389694e+00,
  -1.55779694e+00,-1.53169694e+00,-1.50559694e+00,-1.47949694e+00,
  -1.45339694e+00,-1.42729694e+00,-1.40119694e+00,-1.37509694e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00,-1.35082298e+00,-1.35082298e+00,
  -1.35082298e+00,-1.35082298e+00],
 [-2.57683743e-04,-2.63576837e-02,-5.24576837e-02,-7.85576837e-02,
  -1.04657684e-01,-1.30757684e-01,-1.56857684e-01,-1.82957684e-01,
  -2.09057684e-01,-2.35157684e-01,-2.61257684e-01,-2.87357684e-01,
  -3.13457684e-01,-3.39557684e-01,-3.65657684e-01,-3.91757684e-01,
  -4.17857684e-01,-4.43957684e-01,-4.70057684e-01,-4.96157684e-01,
  -5.22257684e-01,-5.48357684e-01,-5.74457684e-01,-6.00557684e-01,
  -6.26657684e-01,-6.52757684e-01,-6.78857684e-01,-7.04957684e-01,
  -7.31057684e-01,-7.57157684e-01,-7.83257684e-01,-8.09357684e-01,
  -8.35457684e-01,-8.61557684e-01,-8.87657684e-01,-9.13757684e-01,
  -9.39857684e-01,-9.65957684e-01,-9.92057684e-01,-1.01815768e+00,
  -1.04425768e+00,-1.07035768e+00,-1.09645768e+00,-1.12255768e+00,
  -1.14865768e+00,-1.17475768e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00,-1.18929716e+00,-1.18929716e+00,
  -1.18929716e+00,-1.18929716e+00],
 [ 3.03634501e+00, 3.01024501e+00, 2.98414501e+00, 2.95804501e+00,
   2.93194501e+00, 2.90584501e+00, 2.87974501e+00, 2.85364501e+00,
   2.82754501e+00, 2.80144501e+00, 2.77534501e+00, 2.74924501e+00,
   2.72314501e+00, 2.69704501e+00, 2.67094501e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00, 2.66503205e+00, 2.66503205e+00,
   2.66503205e+00, 2.66503205e+00],
 [ 7.41070151e-01, 7.14970151e-01, 6.88870151e-01, 6.62770151e-01,
   6.36670151e-01, 6.10570151e-01, 5.84470151e-01, 5.58370151e-01,
   5.32270151e-01, 5.06170151e-01, 4.80070151e-01, 4.53970151e-01,
   4.27870151e-01, 4.01770151e-01, 3.75670151e-01, 3.49570151e-01,
   3.23470151e-01, 2.97370151e-01, 2.71270151e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01, 2.46167357e-01, 2.46167357e-01,
   2.46167357e-01, 2.46167357e-01])

    tool_link = pb.link_from_name(world.robot, "panda_hand")
    pb.wait_for_user()

    for t in range(len(trajectory[0])):
        joint_values = [trajectory[j, t] for j in range(len(trajectory))]
        pb.set_joint_positions(world.robot, world.arm_joints, joint_values)
        time.sleep(0.1)

    print("Done!")
    pb.wait_for_user()